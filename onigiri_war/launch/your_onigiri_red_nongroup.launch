<?xml version="1.0"?>
<launch>
    <!-- You can change control program  -->

    <!-- Start Lidar        (Unnecessary :execute) -->
    <!-- velocity_smoother  (Unnecessary :not use) -->
    <!-- Start TF publisher (Unnecessary :execute) -->

    <!-- Map server         (Unnecessary :not use) -->
    <!--<node name="map_server" pkg="map_server" type="map_server" args="$(find kamenigiri_navi)/map/kame_map.yaml"/>-->

    <!-- AMCL -->
    <arg name="custom_amcl_launch_file" default="$(find kamenigiri_navi)/amcl/includes/amcl.launch.xml"/>
    <arg name="initial_pose_x" default="0.0"/>
    <arg name="initial_pose_y" default="0.0"/>
    <arg name="initial_pose_a" default="0.0"/>
    <include file="$(arg custom_amcl_launch_file)">
        <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
        <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
        <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
    </include>

    <!-- Move base -->
    <!--
    ** reference
        ・turtlebot & Co-creative robot
        ・URL：http://daily-tech.hatenablog.com/entry/2017/02/11/145537
        ・Husky_navigation:move_base_mapless_demo.launch
    -->
    <arg name="base_global_planner" default="navfn/NavfnROS"/>
    <arg name="base_local_planner" default="dwa_local_planner/DWAPlannerROS"/>
    <!-- <arg name="base_local_planner" default="base_local_planner/TrajectoryPlannerROS"/> -->
    <arg name="cmd_vel_topic" default="red_bot/cmd_vel" />
    <arg name="odom_topic" default="red_bot/odom" />
    <arg name="laser_topic" default="red_bot/scan" />

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

        <param name="base_global_planner" value="$(arg base_global_planner)"/>
        <param name="base_local_planner" value="$(arg base_local_planner)"/>
        <rosparam file="$(find kamenigiri_navi)/move_base/param/planner.yaml" command="load"/>

        <!-- observation sources located in costmap_common.yaml -->
        <rosparam file="$(find kamenigiri_navi)/move_base/param/costmap_common.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find kamenigiri_navi)/move_base/param/costmap_common.yaml" command="load" ns="local_costmap" />

        <!-- local costmap, needs size -->
        <rosparam file="$(find kamenigiri_navi)/move_base/param/costmap_local.yaml" command="load" ns="local_costmap" />
        <param name="local_costmap/width" value="10.0"/>
        <param name="local_costmap/height" value="10.0"/>

        <!-- global costmap with laser, for odom_navigation_demo -->
        <rosparam file="$(find kamenigiri_navi)/move_base/param/costmap_global.yaml" command="load" ns="global_costmap"/>
        <param name="global_costmap/width" value="100.0"/>
        <param name="global_costmap/height" value="100.0"/>

        <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
        <remap from="odom"    to="$(arg odom_topic)"/>
        <remap from="scan"    to="$(arg laser_topic)"/>
    </node>

    <!-- rtimulib           (Unnecessary :not use) -->

    <!-- robot_pose_ekf -->
    <arg name="output_frame"   default="red_bot/odom"/>
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <param name="output_frame" value="odom"/>
        <param name="freq" value="30.0"/>
        <param name="sensor_timeout" value="10.0"/>
        <param name="odom_used" value="true"/>
        <param name="imu_used" value="true"/>
        <param name="vo_used" value="false"/>
        <param name="debug" value="false"/>
        <param name="self_diagnose" value="false"/>

        <remap from="imu_data" to="red_bot/imu" />
        <remap from="odom" to="red_bot/odom" />
    </node>

    <!-- kameNigiri_evolution (my source code) -->
    <node pkg="onigiri_war" type="kameNigiri_evolution.py" name="kameNigiri" output="screen"/>

    <!-- End of your space  -->
</launch>
